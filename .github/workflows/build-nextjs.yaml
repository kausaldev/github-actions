# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
name: Build NextJS image

on:
  workflow_call:
    inputs:
      project_id:
        required: true
        type: string
      docker_image_name:
        required: false
        type: string
        default: ${{ vars.DOCKER_IMAGE_REPO }}
      docker_build_cache_image_name:
        required: false
        type: string
        default: ${{ vars.DOCKER_IMAGE_BUILD_REPO }}
      docker_registry:
        required: false
        type: string
        default: ${{ vars.DOCKER_REGISTRY }}
      sentry_org:
        required: false
        default: ${{ vars.SENTRY_ORG }}
        type: string
      sentry_url:
        required: false
        default: ${{ vars.SENTRY_URL }}
        type: string
      sentry_project:
        required: false
        default: ${{ vars.SENTRY_PROJECT }}
        type: string
    secrets:
      NPM_TOKEN:
        required: true
      SENTRY_AUTH_TOKEN:
        required: false
      CF_ACCESS_KEY_ID:
        required: false
      CF_SECRET_ACCESS_KEY:
        required: false
    outputs:
      image_id:
        description: "SHA digest for the built image"
        value: "${{ jobs.build.outputs.image_id }}"
      image_registry:
        description: "Docker registry where image was pushed"
        value: "${{ inputs.docker_registry }}"
      image:
        description: "Full image path (including registry)"
        value: "${{ jobs.build.outputs.image }}"
      image_tag:
        description: "Tag for the pushed image"
        value: "${{ jobs.build.outputs.image_tag }}"
      build_id:
        description: "Unique ID for the fresh build"
        value: "${{ jobs.build.outputs.build_id }}"
      deployment_env:
        description: "Environment in which the image should be deployed"
        value: "${{ jobs.build.outputs.deployment_env }}"

env:
  IMAGE_NAME: ${{ inputs.docker_image_name }}
  IMAGE_FULL_PATH: ${{ inputs.docker_registry }}/${{ inputs.docker_image_name }}
  GIT_REPO_URL: ${{ github.server_url }}/${{ github.repository }}

jobs:
  build:
    name: Build
    runs-on: self-hosted
    permissions:
      id-token: write
      packages: write
      attestations: write
      contents: read
    container:
      image: harbor.kausal.dev/library/ubuntu:latest

    concurrency:
      group: ${{ inputs.docker_registry }}/${{ inputs.docker_image_name }}

    outputs:
      image_id: ${{ steps.build_push.outputs.imageid }}
      image: ${{ inputs.docker_registry }}/${{ inputs.docker_image_name }}
      image_tag: ${{ steps.context.outputs.git_image_tag }}
      image_digest: ${{ steps.check_existing.outputs.digest || steps.build_push.outputs.digest }}
      build_id: ${{ steps.check_existing.outputs.build_id || steps.build_meta.outputs.build_id }}
      deployment_env: ${{ steps.context.outputs.deployment_env }}
      #nextjs_asset_prefix: ${{ steps.build_meta.outputs.nextjs_asset_prefix }}
      #nextjs_cdn_bucket_path: ${{ steps.build_meta.outputs.nextjs_cdn_bucket_path }}

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set build context
        run: |
          if [ "${{ startsWith(github.ref, 'refs/heads/deployment/') }}" -eq "true" ] ; then
            echo "deployment_env=$(echo ${{ github.ref }} | cut -d / -f 4)" >> $GITHUB_OUTPUT
          else
            echo "deployment_env=" >> $GITHUB_OUTPUT
          fi
          git_short_sha=$(echo ${{ github.sha }} | cut -c -7)
          git_tag=git-${git_short_sha}
          echo "git_image_tag=${git_tag}" >> $GITHUB_OUTPUT
          echo "GIT_IMAGE_TAG=${git_tag}" >> $GITHUB_ENV
          echo "git_short_sha=$git_short_sha" >> $GITHUB_OUTPUT
        id: context

      - name: Log into Docker registry
        uses: docker/login-action@v3
        with:
          registry: ${{ inputs.docker_registry }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Check if an image for this git head already exists
        id: check_existing
        run: |
          image_info=$(mktemp --suffix=.json)
          echo "Output to $image_info"
          set +e
          docker buildx imagetools inspect ${{ env.IMAGE_FULL_PATH }}:${{ steps.context.outputs.git_image_tag }} --format '{{ json . }}' > $image_info
          if [ $? -ne 0 ] ; then
            echo status=not_found >> $GITHUB_OUTPUT
            exit 0
          fi
          set -e
          digest=$(cat $image_info | jq -j .manifest.digest)
          build_id="$(cat $image_info | jq -j '.image.config.Labels."org.opencontainers.image.version"')"
          echo "Digest: $digest"
          echo "Build ID: $build_id"
          if [ -z "$digest" -o -z "$build_id" ] ; then
            echo status=not_found >> $GITHUB_OUTPUT
            exit 0
          fi

          echo status=found >> $GITHUB_OUTPUT
          echo digest=$digest >> $GITHUB_OUTPUT
          echo "build_id=$build_id" >> $GITHUB_OUTPUT
          echo "IMAGE_BUILD_ID=$build_id" >> $GITHUB_ENV
          echo "sentry_version=${{ inputs.sentry_project }}@${build_id}" >> $GITHUB_OUTPUT

      - name: Determine build env variables
        if: steps.check_existing.outputs.status != 'found'
        run: |
          github_run=$(printf "%04g" $GITHUB_RUN_NUMBER)
          git_sha=${{ steps.context.outputs.git_short_sha }}
          build_id=$(date +%Y%m%d)_${github_run}_${git_sha}
          echo "build_id=${build_id}" >> $GITHUB_ENV
          echo IMAGE_BUILD_ID=$build_id >> $GITHUB_ENV
          echo "sentry_version=${{ inputs.sentry_project }}@${build_id}" >> $GITHUB_OUTPUT

          #if [ ! -z "${{ secrets.CF_ACCESS_KEY_ID }}" -a ! -z "${{ vars.CF_S3_PUBLIC_URL }}" ] ; then
          #  echo "nextjs_asset_prefix=${{ vars.CF_S3_PUBLIC_URL }}/${build_id}" >> $GITHUB_OUTPUT
          #  echo "nextjs_cdn_bucket_path=${build_id}" >> $GITHUB_OUTPUT
          #fi
        id: build_meta

      - name: Determine Docker tags and labels
        id: docker_meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_FULL_PATH }}
          tags: |
            type=raw,value=${{steps.context.outputs.git_image_tag}}
            type=raw,value=build-${{steps.build_meta.outputs.build_id}},enable=${{steps.check_existing.outputs.status != 'found'}}
            type=ref,event=pr
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value={{branch}}-latest,enable=${{steps.context.outputs.deployment_env != ''}}

      - name: Update existing image tags
        if: steps.check_existing.outputs.status == 'found'
        run: |
          TAGS=$(echo "${{ steps.docker_meta.outputs.tags }}" | grep latest | xargs)
          for tag in $TAGS ; do
            docker buildx imagetools create -t $tag ${{ env.IMAGE_FULL_PATH }}@${{ steps.check_existing.outputs.digest }} ;
          done

      - name: Set up Docker Buildx
        if: steps.build_meta.outcome != 'skipped'
        uses: docker/setup-buildx-action@v3
        with:
          driver: remote
          driver-opts:
          endpoint: tcp://buildkitd:1234
          install: false
          cleanup: true
  
      - name: Build bundle
        uses: docker/build-push-action@v5
        id: build_push
        if: steps.build_meta.outcome != 'skipped'
        env:
          BUILDX_GIT_INFO: 'false'
        with:
          context: .
          push: true
          build-args: |
            SENTRY_ORG=${{ inputs.sentry_org }}
            SENTRY_URL=${{ inputs.sentry_url }}
            SENTRY_PROJECT=${{ inputs.sentry_project }}
            SENTRY_RELEASE=${{ steps.build_meta.outputs.sentry_version }}
            BUILD_ID=${{ steps.build_meta.outputs.build_id }}
            GIT_REPO=${{ github.repository }}
            GIT_REV=${{ github.sha }}
            GIT_REPO_URL=${{ env.GIT_REPO_URL }}
            NPM_REGISTRY_SERVER=${{ vars.NPM_REGISTRY_SERVER }}
          # NEXTJS_ASSET_PREFIX=${{ steps.build_meta.outputs.nextjs_asset_prefix }}
          secrets: |
            SENTRY_AUTH_TOKEN=${{ secrets.SENTRY_AUTH_TOKEN }}
            NPM_TOKEN=${{ secrets.NPM_TOKEN }}
          labels: |
            ${{ steps.docker_meta.outputs.labels }}
            org.opencontainers.image.version=${{ steps.build_meta.outputs.build_id }}
          tags: |
            ${{ steps.docker_meta.outputs.tags }}
          #cache-from: type=registry,ref=${{ inputs.docker_registry }}/${{ inputs.docker_build_cache_image_name }}:cache
          #cache-to: type=registry,ref=${{ inputs.docker_registry }}/${{ inputs.docker_build_cache_image_name }}:cache,mode=max,image-manifest=true,oci-mediatypes=true

      - name: Attest image
        uses: actions/attest-build-provenance@v1
        if: steps.build_meta.outcome != 'skipped'
        with:
          subject-name: ${{ env.IMAGE_FULL_PATH }}
          subject-digest: ${{ steps.build_push.outputs.digest }}
          push-to-registry: true
  
      - name: Sign the images with GitHub OIDC Token
        if: steps.build_meta.outcome != 'skipped'
        env:
          DIGEST: ${{ steps.build_push.outputs.digest }}
          IMAGE: ${{ inputs.docker_registry }}/${{ inputs.docker_build_cache_image_name }}
        run: |
          cosign sign --yes ${IMAGE}@${DIGEST}

      - name: Create Sentry release
        uses: getsentry/action-release@v1
        if: steps.context.outputs.deployment_env
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ inputs.sentry_org }}
          SENTRY_PROJECT: ${{ inputs.sentry_project }}
          SENTRY_URL: ${{ inputs.sentry_url }}
        with:
          environment: ${{ steps.context.outputs.deployment_env }}
          version: ${{ steps.build_meta.outputs.sentry_version || steps.check_existing.outputs.sentry_version}}

  cdn-upload:
    needs: [build]
    if: needs.build.outputs.nextjs_cdn_bucket_path
    name: Upload static assets to CDN
    runs-on: self-hosted
    container:
      image: "${{ needs.build.outputs.image }}:${{ needs.build.outputs.image_tag }}"
    env:
      RCLONE_S3_ACCESS_KEY_ID: ${{ secrets.CF_ACCESS_KEY_ID }}
      RCLONE_S3_SECRET_ACCESS_KEY: ${{ secrets.CF_SECRET_ACCESS_KEY }}
      RCLONE_S3_ENDPOINT: ${{ vars.CF_S3_ENDPOINT }}
      RCLONE_S3_ENV_AUTH: 'true'
      RCLONE_S3_PROVIDER: Cloudflare
      RCLONE_S3_DISABLE_CHECKSUM: 'true'
      RCLONE_S3_UPLOAD_CONCURRENCY: '32'
      RCLONE_S3_NO_CHECK_BUCKET: 'true'
      RCLONE_S3_NO_HEAD: 'true'
    concurrency:
      group: ${{ inputs.docker_registry }}/${{ inputs.docker_image_name }}

    steps:
      - name: Install rclone
        run: |
          apk update
          apk add rclone
      - name: Upload files
        run: |
          DEST=":s3:/${{ vars.CF_CDN_BUCKET }}/${{ needs.build.outputs.nextjs_cdn_bucket_path }}"
          FLAGS="--transfers 32 --checkers 32 --copy-links --no-check-dest"
          rclone copy $FLAGS .next/static "${DEST}/_next/static"
          rclone copy $FLAGS public/static ${DEST}/static
        working-directory: /app
